version: 2.1
jobs:
  build_image:
    docker:
      - image: circleci/ruby:2.7.1
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          IMAGE=x3enos/time_tracker:$CIRCLE_SHA1
          PRODUCTION=x3enos/time_tracker:production
          docker build -t $IMAGE -t $PRODUCTION .
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push $IMAGE
          docker push $PRODUCTION
  build_development_image:
    docker:
      - image: circleci/ruby:2.7.1
    steps:
      - checkout
      - setup_remote_docker
      - run: |
          IMAGE=x3enos/time_tracker:$CIRCLE_SHA1
          DEVELOPMENT=x3enos/time_tracker:development
          docker build -t $IMAGE -t $DEVELOPMENT .
          docker login -u $DOCKER_USER -p $DOCKER_PASS
          docker push $IMAGE
          docker push $DEVELOPMENT

  deploy_staging:
    docker:
      - image: circleci/ruby:2.7.1
    steps:
      - checkout
      - run: |
          curl -u $CATTLE_KEY \
          -X POST \
          -H 'Accept: application/json' \
          -H 'Content-Type: application/json' \
          "https://k8s.andres-sild.com/v3/project/c-r9l2h:p-cnhjm/workloads/deployment:staging:time-tracker-api?action=redeploy"

  deploy_production:
    docker:
      - image: circleci/ruby:2.7.1
    steps:
      - checkout
      - run: |
          curl -u $CATTLE_KEY \
          -X POST \
          -H 'Accept: application/json' \
          -H 'Content-Type: application/json' \
          "https://k8s.andres-sild.com/v3/project/c-r9l2h:p-cnhjm/workloads/deployment:default:time-tracker-api-production?action=redeploy"

  build:
    docker:
      - image: circleci/ruby:2.7.1
        environment:
          RAILS_ENV: test
      - image: postgres:9.5
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: time_tracker_test
          POSTGRES_PASSWORD: password

    working_directory: ~/time_tracker

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            gem install bundler
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run: cp config/database.yml.example config/database.yml

      - run: sudo apt-get update
      - run: sudo apt-get install xvfb libfontconfig wkhtmltopdf

      # Database setup
      - run: POSTGRES_DB="test_db" bundle exec rake db:create
      - run: bundle exec rake db:migrate

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

workflows:
  build_and_deploy:
    jobs:
      - build
      - build_development_image:
          requires:
            - build
          filters:
            branches:
              only: development
      - deploy_staging_approval:
          name: Deploy to staging
          type: approval
          requires:
            - build_development_image
          filters:
            branches:
              only: development
      - deploy_staging:
          requires:
            - Deploy to staging
          filters:
            branches:
              only: development
      - build_image:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy_production_approval:
          name: Deploy to production
          type: approval
          requires:
            - build_image
          filters:
            branches:
              only: master
      - deploy_production:
          requires:
            - Deploy to production
          filters:
            branches:
              only: master
